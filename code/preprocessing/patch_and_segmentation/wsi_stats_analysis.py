# Imports
import os
import argparse
import numpy as np
import time
import pandas as pd

# Project Imports
from wsi_class import WholeSlideImage



# Method: Get all folders and SVS paths
def get_tcgabrca_folders_and_svs_fpaths(base_data_path):

    # Enter the WSI directory of the dataset
    wsi_directory = os.path.join(base_data_path, 'WSI')

    # Get folders
    folders = [f for f in os.listdir(wsi_directory) if not f.startswith('.')]

    # Create a list for the SVS filepaths
    svs_fpaths = list()

    # Enter each folder
    for folder in folders:

        # Get the contents of each folder
        folder_contents = [c for c in os.listdir(os.path.join(wsi_directory, folder)) if not c.startswith('.')]
        
        # Get the SVS file(s)
        svs_files = [s for s in folder_contents if s.endswith('svs')]

        # Build SVS filepaths
        for svs_f in svs_files:
            svs_fpath = os.path.join(wsi_directory, folder, svs_f)

            # Append it to the list
            svs_fpaths.append(svs_fpath)

    return svs_fpaths



# Function: WSI Stats
def wsi_stats(base_data_path=None, **kwargs):

    # Create conditionals according to the use case
    slides = get_tcgabrca_folders_and_svs_fpaths(base_data_path=base_data_path)
    # Example WSI path
    # /autofs/cluster/qtim/datasets/public/TCGA-BRCA/WSI/8f936d42-6deb-43a5-995b-4af18e6a2462/TCGA-A2-A0EY-01Z-00-DX1.2F2428B3-0767-48E0-AC22-443C244CBD16.svs
    



    # HistoQC: Quality Assessment of WSI
    hqc_q = None
    if 'use_histoqc_quality_file' in kwargs.keys():
        if kwargs['use_histoqc_quality_file']:
            # Load and read the HistQC quality files
            hqc_q = pd.read_csv(args.use_histoqc_quality_file)

            # Process the dataframe to get the good quality cases
            hqc_q = hqc_q[hqc_q['is_good_quality'] == True]
            hqc_q = hqc_q[['wsi_folder_path', 'is_good_quality']]
            hqc_q = hqc_q['wsi_folder_path']
            hqc_q = list(hqc_q.values)

            # Get the WSI IDs
            hqc_slide_ids = [s.split('/')[-1] for s in hqc_q]

            # Get the dataset WSI IDs
            slide_ids = [s.split('/')[-1] for s in slides]

            # Process the subset of WSI IDs after the results of HistoQC
            slide_ids_ = list()
            for s_id in slide_ids:
                if s_id in hqc_slide_ids:
                    slide_ids_.append(s_id)


            # Build a new list of slides
            slides_ = list()
            for s in slides:
                s_id = s.split('/')[-1]
                if s_id in slide_ids_:
                    slides_.append(s)
            slides = slides_.copy()



    # Go through the dataset
    magnifications = list()
    for idx, wsi_path in enumerate(slides):
        print(f"Index: {idx}, WSI Path: {os.path.join(base_data_path, wsi_path)}")
        # print(wsi_path)


        # Inialize WSI
        WSI_object = WholeSlideImage(os.path.join(base_data_path, wsi_path))
        wsi_ = WSI_object.getOpenSlide()
        wsi_properties = dict(wsi_.properties)
        print(wsi_properties)
        
        # Get magnification
        # mag = NOT AVAILABLE
        # print(mag, float(mag))
        # magnifications.append(float(mag))
        # We used QuPath: 40X mag!

        # Get level count and downsamples
        lvl_count = wsi_.level_count
        print(f"Level count: {lvl_count}")

        lvl_downsamples = wsi_.level_downsamples
        print(f"Level downsamples: {lvl_downsamples}")

    return



# Run the script
if __name__ == '__main__':

    # CLI Interface
    parser = argparse.ArgumentParser(description='CLAM: Segment and Patch WSI.')
    parser.add_argument('--base_data_path', type=str, required=True, help="The base path to the TCGA-BRCA data.")
    parser.add_argument('--use_histoqc_quality_file', type=str, default=None, help="Use the quality file generated by the HistoQC framework.")
    parser.add_argument('--verbose', action="store_true", help="Print execution information.")
    args = parser.parse_args()


    # Perform segmentation and patching
    wsi_stats(
        base_data_path=args.base_data_path,
        use_histoqc_quality_file=args.use_histoqc_quality_file if args.use_histoqc_quality_file else None,
        verbose=args.verbose if args.verbose else False
    )
